process {

  cpus = { check_max( 1, 'cpus' ) }
  memory = { check_max( 4.GB * task.attempt, 'memory' ) }
  time = { check_max( 2.h * task.attempt, 'time' ) }

  errorStrategy = { task.exitStatus in [1,143,137,104,134,139] ? 'retry' : 'finish' }
  maxRetries = 3
  maxErrors = '-1'

  withName:trim_and_combine {
      cpus = { check_max( 4, 'cpus' ) }
      memory = { check_max( 1.GB * task.attempt, 'memory' ) }
      time = { check_max( 2.h * task.attempt, 'time' ) }
  }

  withName:fastqc {
      cpus = { check_max( 2, 'cpus' ) }
      memory = { check_max( 1.GB * task.attempt, 'memory' ) }
      time = { check_max( 1.h * task.attempt, 'time' ) }
  }

  withName:unicycler {
      cpus = { check_max( 4, 'cpus' ) }
      memory = { check_max( 8.GB * task.attempt, 'memory' ) }
      time = { check_max( 8.h * task.attempt, 'time' ) }
  }

  withName:quast {
      cpus = { check_max( 1, 'cpus' ) }
      memory = { check_max( 1.GB * task.attempt, 'memory' ) }
      time = { check_max( 1.h * task.attempt, 'time' ) }
  }

  withName:prokka {
      cpus = { check_max( 4, 'cpus' ) }
      memory = { check_max( 1.GB * task.attempt, 'memory' ) }
      time = { check_max( 1.h * task.attempt, 'time' ) }
  }

  withName:multiqc {
      cpus = { check_max( 1, 'cpus' ) }
      memory = { check_max( 2.GB * task.attempt, 'memory' ) }
      time = { check_max( 1.h * task.attempt, 'time' ) }
  }

  params {
      // Defaults only, expecting to be overwritten
      max_memory = 64.GB
      max_cpus = 32
      max_time = 24.h
  }
}
